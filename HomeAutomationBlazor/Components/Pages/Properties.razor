@page "/properties"
@rendermode InteractiveServer
@inject ApiService Api

<PageTitle>Properties</PageTitle>

<h3>Properties</h3>

@if (!Api.IsAuthenticated)
{
    <p>Please <NavLink href="/login">log in</NavLink> to manage properties.</p>
}
else if (props == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Router</th>
                <th>Organisation</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var p in props)
        {
            <tr>
                <td>@p.Name</td>
                <td>@p.RouterDeviceId</td>
                <td>@p.OrganisationId</td>
                <td>
                    <button class="btn btn-sm btn-danger" @onclick="() => Delete(p.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <EditForm Model="newProp" OnValidSubmit="AddProperty">
        <DataAnnotationsValidator />
        <div class="row g-2 mb-3">
            <div class="col">
                <InputText class="form-control" placeholder="Name" @bind-Value="newProp.Name" />
            </div>
            <div class="col">
                <InputText class="form-control" placeholder="Router" @bind-Value="newProp.RouterDeviceId" />
            </div>
            <div class="col">
                <InputNumber class="form-control" @bind-Value="newProp.OrganisationId" />
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" type="submit">Add</button>
            </div>
        </div>
    </EditForm>
}

@code {
    private List<Property>? props;
    private Property newProp = new();

    protected override async Task OnInitializedAsync()
    {
        if (Api.IsAuthenticated)
        {
            props = await Api.GetProperties();
        }
    }

    private async Task AddProperty()
    {
        var created = await Api.CreateProperty(newProp);
        if (created != null)
        {
            props?.Add(created);
            newProp = new();
        }
    }

    private async Task Delete(int id)
    {
        await Api.DeleteProperty(id);
        var item = props?.FirstOrDefault(p => p.Id == id);
        if (item != null)
        {
            props!.Remove(item);
        }
    }
}
