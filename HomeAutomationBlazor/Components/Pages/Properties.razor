@page "/properties"
@rendermode InteractiveServer
@inject ApiService Api

<PageTitle>Properties</PageTitle>

<h3>Properties</h3>

@if (!Api.IsAuthenticated)
{
    <p>Please <NavLink href="/login">log in</NavLink> to manage properties.</p>
}
else if (props == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Router</th>
                <th>Organisation</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var p in props)
        {
            if (editProp?.Id == p.Id)
            {
                <tr>
                    <td><InputText class="form-control" @bind-Value="editProp.Name" /></td>
                    <td><InputText class="form-control" @bind-Value="editProp.RouterDeviceId" /></td>
                    <td>
                        <InputSelect class="form-select" @bind-Value="editProp.OrganisationId">
                            @if (organisations != null)
                            {
                                @foreach (var o in organisations)
                                {
                                    <option value="@o.Id">@o.Name</option>
                                }
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="SaveEdit">Save</button>
                        <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </td>
                    <td></td>
                </tr>
            }
            else
            {
                <tr>
                    <td>@p.Name</td>
                    <td>@p.RouterDeviceId</td>
                    <td>@(organisations?.FirstOrDefault(o => o.Id == p.OrganisationId)?.Name ?? p.OrganisationId.ToString())</td>
                    <td>
                        <NavLink class="btn btn-sm btn-secondary me-2" href="@($"/properties/{p.Id}")">Manage</NavLink>
                        <button class="btn btn-sm btn-secondary" @onclick="() => StartEdit(p)">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(p.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>

    <EditForm Model="newProp" OnValidSubmit="AddProperty">
        <DataAnnotationsValidator />
        <div class="row g-2 mb-3">
            <div class="col">
                <InputText class="form-control" placeholder="Name" @bind-Value="newProp.Name" />
            </div>
            <div class="col">
                <InputText class="form-control" placeholder="Router" @bind-Value="newProp.RouterDeviceId" />
            </div>
            <div class="col">
                <InputSelect class="form-select" @bind-Value="newProp.OrganisationId">
                    <option value="0" disabled>Select organisation...</option>
                    @if (organisations != null)
                    {
                        @foreach (var o in organisations)
                        {
                            <option value="@o.Id">@o.Name</option>
                        }
                    }
                </InputSelect>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" type="submit">Add</button>
            </div>
        </div>
    </EditForm>
}

@code {
    private List<Property>? props;
    private List<Organisation>? organisations;
    private Property newProp = new();
    private Property? editProp;

    protected override async Task OnInitializedAsync()
    {
        if (Api.IsAuthenticated)
        {
            props = await Api.GetProperties();
            organisations = await Api.GetOrganisations();
        }
    }

    private async Task AddProperty()
    {
        var created = await Api.CreateProperty(newProp);
        if (created != null)
        {
            props?.Add(created);
            newProp = new();
        }
    }

    private async Task Delete(int id)
    {
        await Api.DeleteProperty(id);
        var item = props?.FirstOrDefault(p => p.Id == id);
        if (item != null)
        {
            props!.Remove(item);
        }
    }

    private void StartEdit(Property prop)
    {
        editProp = new Property
        {
            Id = prop.Id,
            Name = prop.Name,
            RouterDeviceId = prop.RouterDeviceId,
            OrganisationId = prop.OrganisationId
        };
    }

    private async Task SaveEdit()
    {
        if (editProp == null) return;
        await Api.UpdateProperty(editProp);
        var existing = props?.FirstOrDefault(p => p.Id == editProp.Id);
        if (existing != null)
        {
            existing.Name = editProp.Name;
            existing.RouterDeviceId = editProp.RouterDeviceId;
            existing.OrganisationId = editProp.OrganisationId;
        }
        editProp = null;
    }

    private void CancelEdit() => editProp = null;
}
