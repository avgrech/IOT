@page "/routerdevices"
@rendermode InteractiveServer
@inject ApiService Api

<PageTitle>Router Devices</PageTitle>

<h3>Router Devices</h3>

@if (!Api.IsAuthenticated)
{
    <p>Please <NavLink href="/login">log in</NavLink> to manage router devices.</p>
}
else if (routers == null || properties == null || devices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Unique Id</th>
                <th>Property</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var r in routers)
        {
            var propName = properties.FirstOrDefault(p => p.Id == r.PropertyId)?.Name ?? r.PropertyId.ToString();
            if (editRouter?.Id == r.Id)
            {
                <tr>
                    <td><InputText class="form-control" @bind-Value="editRouter.FriendlyName" /></td>
                    <td><InputText class="form-control" @bind-Value="editRouter.UniqueId" /></td>
                    <td>
                        <InputSelect class="form-select" @bind-Value="editRouter.PropertyId">
                            @foreach (var p in properties)
                            {
                                <option value="@p.Id">@p.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="SaveEdit">Save</button>
                        <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </td>
                    <td></td>
                </tr>
            }
            else
            {
                <tr>
                    <td>@r.FriendlyName</td>
                    <td>@r.UniqueId</td>
                    <td>@propName</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => SyncRouter(r.UniqueId)">Sync</button>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-secondary me-2" @onclick="() => StartEdit(r)">Edit</button>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteRouter(r.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>

    <EditForm Model="newRouter" OnValidSubmit="AddRouter">
        <DataAnnotationsValidator />
        <div class="row g-2 mb-3">
            <div class="col">
                <InputText class="form-control" placeholder="Name" @bind-Value="newRouter.FriendlyName" />
            </div>
            <div class="col">
                <InputText class="form-control" placeholder="Unique Id" @bind-Value="newRouter.UniqueId" />
            </div>
            <div class="col">
                <InputSelect class="form-select" @bind-Value="newRouter.PropertyId">
                    <option value="0" disabled>Select property...</option>
                    @foreach (var p in properties)
                    {
                        <option value="@p.Id">@p.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" type="submit" disabled="@(newRouter.PropertyId == 0)">Add</button>
            </div>
        </div>
    </EditForm>

    <h4 class="mt-4">Devices</h4>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Router</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var d in devices!)
        {
            var routerName = routers!.FirstOrDefault(r => r.Id == d.RouterDeviceId)?.FriendlyName ?? d.RouterDeviceId.ToString();
            <tr>
                <td>@d.Name</td>
                <td>@routerName</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<RouterDevice>? routers;
    private List<Property>? properties;
    private List<Device>? devices;
    private RouterDevice newRouter = new();
    private RouterDevice? editRouter;

    protected override async Task OnInitializedAsync()
    {
        if (Api.IsAuthenticated)
        {
            routers = await Api.GetRouterDevices();
            properties = await Api.GetProperties();
            devices = await Api.GetDevices();
            if (routers != null && devices != null)
            {
                // Filter devices to only those linked to the loaded routers
                var routerIds = routers.Select(r => r.Id).ToHashSet();
                devices = devices.Where(d => routerIds.Contains(d.RouterDeviceId)).ToList();
            }
        }
    }

    private async Task AddRouter()
    {
        var created = await Api.CreateRouterDevice(newRouter);
        if (created != null)
        {
            routers!.Add(created);
            newRouter = new RouterDevice();
        }
    }

    private async Task DeleteRouter(int id)
    {
        await Api.DeleteRouterDevice(id);
        routers?.RemoveAll(r => r.Id == id);
        devices?.RemoveAll(d => d.RouterDeviceId == id);
    }

    private void StartEdit(RouterDevice router)
    {
        editRouter = new RouterDevice
        {
            Id = router.Id,
            FriendlyName = router.FriendlyName,
            UniqueId = router.UniqueId,
            PropertyId = router.PropertyId
        };
    }

    private async Task SaveEdit()
    {
        if (editRouter == null) return;
        await Api.UpdateRouterDevice(editRouter);
        var existing = routers?.FirstOrDefault(r => r.Id == editRouter.Id);
        if (existing != null)
        {
            existing.FriendlyName = editRouter.FriendlyName;
            existing.UniqueId = editRouter.UniqueId;
            existing.PropertyId = editRouter.PropertyId;
        }
        editRouter = null;
    }

    private void CancelEdit() => editRouter = null;

    private async Task SyncRouter(string routerUniqueId)
    {
        await Api.TriggerRouterSync(routerUniqueId);
    }
}
