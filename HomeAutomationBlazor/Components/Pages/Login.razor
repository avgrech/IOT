@page "/login"
@rendermode InteractiveServer
@inject ApiService Api
@inject NavigationManager Nav

<PageTitle>Login</PageTitle>

<h3>@(Api.IsAuthenticated ? "Logout" : "Login")</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}

@if (Api.IsAuthenticated)
{
    <button class="btn btn-primary" @onclick="HandleLogout">Logout</button>
}
else
{
    <EditForm Model="model" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Username</label>
            <InputText class="form-control" @bind-Value="model.Username" />
        </div>
        <div class="mb-3">
            <label class="form-label">Password</label>
            <InputText type="password" class="form-control" @bind-Value="model.Password" />
        </div>
        <button class="btn btn-primary" type="submit">Login</button>
    </EditForm>
}

@code {
    private LoginModel model = new();
    private string? error;

    private async Task HandleLogin()
    {
        if (await Api.Login(model.Username, model.Password))
        {
            Nav.NavigateTo("/");
        }
        else
        {
            error = "Invalid username or password";
        }
    }

    private void HandleLogout()
    {
        Api.Logout();
        Nav.NavigateTo("/");
    }

    class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
