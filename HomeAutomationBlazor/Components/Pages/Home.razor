@page "/"
@rendermode InteractiveServer
@inject ApiService Api
@inject NavigationManager Nav

<PageTitle>Home</PageTitle>

@if (!Api.IsAuthenticated)
{
    <h3>Login</h3>
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }
    <EditForm Model="model" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Username</label>
            <InputText class="form-control" @bind-Value="model.Username" />
        </div>
        <div class="mb-3">
            <label class="form-label">Password</label>
            <InputText type="password" class="form-control" @bind-Value="model.Password" />
        </div>
        <button class="btn btn-primary" type="submit">Login</button>
    </EditForm>
}
else
{
   <h1>Total Control at Your Fingertips</h1>
   <p>Manage your lights, sensors, and automationsâ€”all in one place.</p>
   <button class="btn btn-primary" @onclick="HandleLogout">Logout</button>
}

@code {
    private LoginModel model = new();
    private string? error;

    private async Task HandleLogin()
    {
        if (await Api.Login(model.Username, model.Password))
        {
            Nav.NavigateTo("/");
        }
        else
        {
            error = Api.LastError ?? "Invalid username or password";
        }
    }

    private async Task HandleLogout()
    {
        await Api.Logout();
        Nav.NavigateTo("/");
    }

    class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
